
/*
 * This file was generated by the SOM Compiler.
 * FileName: semaphor.h.
 * Generated using:
 *     SOM Precompiler somipc: somc/smemit.c
 *     SOM Emitter emith: somc/smmain.c
 */

#ifndef SOM_Semaphore_h
#define SOM_Semaphore_h


/*
 * The SOM_STRICT_IDL macro means that we can ignore stars
 * in our declarations of objects.
 */
#define SOM_STRICT_IDL 1


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef Semaphore
#define Semaphore SOMObject
#endif
#include <gfile.h>

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

#define Semaphore_MajorVersion 0
#define Semaphore_MinorVersion 0

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define SemaphoreNewClass c
#pragma linkage(c, system)
#define SemaphoreClassData d
#define SemaphoreCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */

/*
 * Include the meta class file
 */
#include <semaphor.h>
/*--------------Migration------------*/
#define Semaphore_classObj SemaphoreClassData.classObject
#define _Semaphore Semaphore_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass  SOMLINK SemaphoreNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(SemaphoreNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct SemaphoreClassDataStructure {
	SOMAny *classObject;
	somMToken _get_hEventSem;
	somMToken WaitForEvent;
	somMToken PostSemaphore;
	somMToken ResetSemaphore;
} SemaphoreClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct SemaphoreCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SemaphoreCClassData;

/*
 * New and Renew macros for Semaphore
 */
#define SemaphoreNew() \
	( SemaphoreClassData.classObject \
		? (_somNew(SemaphoreClassData.classObject)) \
		: ( SemaphoreNewClass(Semaphore_MajorVersion, Semaphore_MinorVersion), (_somNew(SemaphoreClassData.classObject)) ) )
#define SemaphoreRenew(buf) \
	( _somRenew(SemaphoreClassData.classObject, buf) )

/*
 * Override method: somInit
 */
#define Semaphore_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * Override method: somUninit
 */
#define Semaphore_somUninit(somSelf) \
	SOMObject_somUninit(somSelf)

/*
 * New Method: _get_hEventSem
 */
typedef HEV   SOMLINK somTP_Semaphore__get_hEventSem(Semaphore somSelf, Environment *ev);
#pragma linkage(somTP_Semaphore__get_hEventSem, system)
typedef somTP_Semaphore__get_hEventSem *somTD_Semaphore__get_hEventSem;
#define somMD_Semaphore__get_hEventSem "::Semaphore::hEventSem"
#define Semaphore__get_hEventSem(somSelf,ev) \
    (SOM_Resolve(somSelf, Semaphore, _get_hEventSem) \
	(somSelf,ev))
#ifndef SOMGD_get_hEventSem
    #if (defined(_get_hEventSem) || defined(__get_hEventSem))
        #undef _get_hEventSem
        #undef __get_hEventSem
        #define SOMGD_get_hEventSem 1
    #else
        #define __get_hEventSem Semaphore__get_hEventSem
    #endif /* __get_hEventSem */
#endif /* SOMGD_get_hEventSem */

/*
 * New Method: WaitForEvent
 */
typedef long   SOMLINK somTP_Semaphore_WaitForEvent(Semaphore somSelf, Environment *ev,
		unsigned long waitType);
#pragma linkage(somTP_Semaphore_WaitForEvent, system)
typedef somTP_Semaphore_WaitForEvent *somTD_Semaphore_WaitForEvent;
#define somMD_Semaphore_WaitForEvent "::Semaphore::WaitForEvent"
#define Semaphore_WaitForEvent(somSelf,ev,waitType) \
    (SOM_Resolve(somSelf, Semaphore, WaitForEvent) \
	(somSelf,ev,waitType))
#ifndef SOMGD_WaitForEvent
    #if (defined(_WaitForEvent) || defined(__WaitForEvent))
        #undef _WaitForEvent
        #undef __WaitForEvent
        #define SOMGD_WaitForEvent 1
    #else
        #define _WaitForEvent Semaphore_WaitForEvent
    #endif /* _WaitForEvent */
#endif /* SOMGD_WaitForEvent */

/*
 * New Method: PostSemaphore
 */
typedef void   SOMLINK somTP_Semaphore_PostSemaphore(Semaphore somSelf, Environment *ev);
#pragma linkage(somTP_Semaphore_PostSemaphore, system)
typedef somTP_Semaphore_PostSemaphore *somTD_Semaphore_PostSemaphore;
#define somMD_Semaphore_PostSemaphore "::Semaphore::PostSemaphore"
#define Semaphore_PostSemaphore(somSelf,ev) \
    (SOM_Resolve(somSelf, Semaphore, PostSemaphore) \
	(somSelf,ev))
#ifndef SOMGD_PostSemaphore
    #if (defined(_PostSemaphore) || defined(__PostSemaphore))
        #undef _PostSemaphore
        #undef __PostSemaphore
        #define SOMGD_PostSemaphore 1
    #else
        #define _PostSemaphore Semaphore_PostSemaphore
    #endif /* _PostSemaphore */
#endif /* SOMGD_PostSemaphore */

/*
 * New Method: ResetSemaphore
 */
typedef unsigned long   SOMLINK somTP_Semaphore_ResetSemaphore(Semaphore somSelf, Environment *ev);
#pragma linkage(somTP_Semaphore_ResetSemaphore, system)
typedef somTP_Semaphore_ResetSemaphore *somTD_Semaphore_ResetSemaphore;
#define somMD_Semaphore_ResetSemaphore "::Semaphore::ResetSemaphore"
#define Semaphore_ResetSemaphore(somSelf,ev) \
    (SOM_Resolve(somSelf, Semaphore, ResetSemaphore) \
	(somSelf,ev))
#ifndef SOMGD_ResetSemaphore
    #if (defined(_ResetSemaphore) || defined(__ResetSemaphore))
        #undef _ResetSemaphore
        #undef __ResetSemaphore
        #define SOMGD_ResetSemaphore 1
    #else
        #define _ResetSemaphore Semaphore_ResetSemaphore
    #endif /* _ResetSemaphore */
#endif /* SOMGD_ResetSemaphore */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define Semaphore__get_path GenericFile__get_path
#define Semaphore__set_path GenericFile__set_path
#define Semaphore__get_name GenericFile__get_name
#define Semaphore__set_name GenericFile__set_name
#define Semaphore_somFree SOMObject_somFree
#define Semaphore_somGetClass SOMObject_somGetClass
#define Semaphore_somGetClassName SOMObject_somGetClassName
#define Semaphore_somGetSize SOMObject_somGetSize
#define Semaphore_somIsA SOMObject_somIsA
#define Semaphore_somIsInstanceOf SOMObject_somIsInstanceOf
#define Semaphore_somRespondsTo SOMObject_somRespondsTo
#define Semaphore_somDispatchV SOMObject_somDispatchV
#define Semaphore_somDispatchL SOMObject_somDispatchL
#define Semaphore_somDispatchA SOMObject_somDispatchA
#define Semaphore_somDispatchD SOMObject_somDispatchD
#define Semaphore_somDispatch SOMObject_somDispatch
#define Semaphore_somClassDispatch SOMObject_somClassDispatch
#define Semaphore_somPrintSelf SOMObject_somPrintSelf
#define Semaphore_somDumpSelf SOMObject_somDumpSelf
#define Semaphore_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_Semaphore_h */

#ifndef SOM_M_Semaphore_h
#define SOM_M_Semaphore_h


/*
 * The SOM_STRICT_IDL macro means that we can ignore stars
 * in our declarations of objects.
 */
#define SOM_STRICT_IDL 1


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef M_Semaphore
#define M_Semaphore SOMObject
#endif
#include <somcls.h>

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

#define M_Semaphore_MajorVersion 0
#define M_Semaphore_MinorVersion 0

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define M_SemaphoreNewClass c
#pragma linkage(c, system)
#define M_SemaphoreClassData d
#define M_SemaphoreCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define M_Semaphore_classObj M_SemaphoreClassData.classObject
#define _M_Semaphore M_Semaphore_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass  SOMLINK M_SemaphoreNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(M_SemaphoreNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct M_SemaphoreClassDataStructure {
	SOMAny *classObject;
	somMToken CreateEventSem;
} M_SemaphoreClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct M_SemaphoreCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} M_SemaphoreCClassData;

/*
 * New and Renew macros for M_Semaphore
 */
#define M_SemaphoreNew() \
	( M_SemaphoreClassData.classObject \
		? (_somNew(M_SemaphoreClassData.classObject)) \
		: ( M_SemaphoreNewClass(M_Semaphore_MajorVersion, M_Semaphore_MinorVersion), (_somNew(M_SemaphoreClassData.classObject)) ) )
#define M_SemaphoreRenew(buf) \
	( _somRenew(M_SemaphoreClassData.classObject, buf) )

/*
 * New Method: CreateEventSem
 */
typedef Semaphore   SOMLINK somTP_M_Semaphore_CreateEventSem(M_Semaphore somSelf, Environment *ev,
		string semName);
#pragma linkage(somTP_M_Semaphore_CreateEventSem, system)
typedef somTP_M_Semaphore_CreateEventSem *somTD_M_Semaphore_CreateEventSem;
#define somMD_M_Semaphore_CreateEventSem "::M_Semaphore::CreateEventSem"
#define M_Semaphore_CreateEventSem(somSelf,ev,semName) \
    (SOM_Resolve(somSelf, M_Semaphore, CreateEventSem) \
	(somSelf,ev,semName))
#ifndef SOMGD_CreateEventSem
    #if (defined(_CreateEventSem) || defined(__CreateEventSem))
        #undef _CreateEventSem
        #undef __CreateEventSem
        #define SOMGD_CreateEventSem 1
    #else
        #define _CreateEventSem M_Semaphore_CreateEventSem
    #endif /* _CreateEventSem */
#endif /* SOMGD_CreateEventSem */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define M_Semaphore_somAllocate SOMClass_somAllocate
#define M_Semaphore_somDeallocate SOMClass_somDeallocate
#define M_Semaphore_somNew SOMClass_somNew
#define M_Semaphore_somNewNoInit SOMClass_somNewNoInit
#define M_Semaphore_somRenew SOMClass_somRenew
#define M_Semaphore_somRenewNoInit SOMClass_somRenewNoInit
#define M_Semaphore_somRenewNoZero SOMClass_somRenewNoZero
#define M_Semaphore_somRenewNoInitNoZero SOMClass_somRenewNoInitNoZero
#define M_Semaphore_somInitClass SOMClass_somInitClass
#define M_Semaphore_somInitMIClass SOMClass_somInitMIClass
#define M_Semaphore_somAddStaticMethod SOMClass_somAddStaticMethod
#define M_Semaphore_somAddDynamicMethod SOMClass_somAddDynamicMethod
#define M_Semaphore_somClassReady SOMClass_somClassReady
#define M_Semaphore_somOverrideSMethod SOMClass_somOverrideSMethod
#define M_Semaphore_somGetApplyStub SOMClass_somGetApplyStub
#define M_Semaphore_somGetClassData SOMClass_somGetClassData
#define M_Semaphore_somSetClassData SOMClass_somSetClassData
#define M_Semaphore_somGetClassMtab SOMClass_somGetClassMtab
#define M_Semaphore_somGetInstanceOffset SOMClass_somGetInstanceOffset
#define M_Semaphore_somGetInstancePartSize SOMClass_somGetInstancePartSize
#define M_Semaphore_somGetInstanceSize SOMClass_somGetInstanceSize
#define M_Semaphore_somGetInstanceToken SOMClass_somGetInstanceToken
#define M_Semaphore_somGetMemberToken SOMClass_somGetMemberToken
#define M_Semaphore_somGetMethodData SOMClass_somGetMethodData
#define M_Semaphore_somGetRdStub SOMClass_somGetRdStub
#define M_Semaphore_somGetMethodDescriptor SOMClass_somGetMethodDescriptor
#define M_Semaphore_somGetMethodIndex SOMClass_somGetMethodIndex
#define M_Semaphore_somGetMethodOffset SOMClass_somGetMethodOffset
#define M_Semaphore_somGetMethodToken SOMClass_somGetMethodToken
#define M_Semaphore_somGetName SOMClass_somGetName
#define M_Semaphore_somGetNthMethodData SOMClass_somGetNthMethodData
#define M_Semaphore_somGetNthMethodInfo SOMClass_somGetNthMethodInfo
#define M_Semaphore_somGetNumMethods SOMClass_somGetNumMethods
#define M_Semaphore_somGetNumStaticMethods SOMClass_somGetNumStaticMethods
#define M_Semaphore_somGetParent SOMClass_somGetParent
#define M_Semaphore_somGetParents SOMClass_somGetParents
#define M_Semaphore_somGetPClsMtab SOMClass_somGetPClsMtab
#define M_Semaphore_somGetPClsMtabs SOMClass_somGetPClsMtabs
#define M_Semaphore_somGetVersionNumbers SOMClass_somGetVersionNumbers
#define M_Semaphore_somSetMethodDescriptor SOMClass_somSetMethodDescriptor
#define M_Semaphore_somCheckVersion SOMClass_somCheckVersion
#define M_Semaphore_somDescendedFrom SOMClass_somDescendedFrom
#define M_Semaphore_somSupportsMethod SOMClass_somSupportsMethod
#define M_Semaphore_somFindMethod SOMClass_somFindMethod
#define M_Semaphore_somFindMethodOk SOMClass_somFindMethodOk
#define M_Semaphore_somFindSMethod SOMClass_somFindSMethod
#define M_Semaphore_somFindSMethodOk SOMClass_somFindSMethodOk
#define M_Semaphore_somLookupMethod SOMClass_somLookupMethod
#define M_Semaphore_somOverrideMtab SOMClass_somOverrideMtab
#define M_Semaphore__get_somInstanceDataOffsets SOMClass__get_somInstanceDataOffsets
#define M_Semaphore_somInit SOMObject_somInit
#define M_Semaphore_somUninit SOMObject_somUninit
#define M_Semaphore_somDumpSelfInt SOMObject_somDumpSelfInt
#define M_Semaphore_somFree SOMObject_somFree
#define M_Semaphore_somInit SOMObject_somInit
#define M_Semaphore_somUninit SOMObject_somUninit
#define M_Semaphore_somGetClass SOMObject_somGetClass
#define M_Semaphore_somGetClassName SOMObject_somGetClassName
#define M_Semaphore_somGetSize SOMObject_somGetSize
#define M_Semaphore_somIsA SOMObject_somIsA
#define M_Semaphore_somIsInstanceOf SOMObject_somIsInstanceOf
#define M_Semaphore_somRespondsTo SOMObject_somRespondsTo
#define M_Semaphore_somDispatchV SOMObject_somDispatchV
#define M_Semaphore_somDispatchL SOMObject_somDispatchL
#define M_Semaphore_somDispatchA SOMObject_somDispatchA
#define M_Semaphore_somDispatchD SOMObject_somDispatchD
#define M_Semaphore_somDispatch SOMObject_somDispatch
#define M_Semaphore_somClassDispatch SOMObject_somClassDispatch
#define M_Semaphore_somPrintSelf SOMObject_somPrintSelf
#define M_Semaphore_somDumpSelf SOMObject_somDumpSelf
#define M_Semaphore_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_M_Semaphore_h */
